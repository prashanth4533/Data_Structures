class TreeNode:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

class BinaryTree:
    def __init__(self, root_data):
        self.root = TreeNode(root_data)

    def insert(self, data):
        self._insert_recursive(data, self.root)

    def _insert_recursive(self, data, node):
        if data < node.data:
            if  not node.left :
                node.left = TreeNode(data)
            else:
                self._insert_recursive(data, node.left)
        else:
            if not node.right :
                node.right = TreeNode(data)
            else:
                self._insert_recursive(data, node.right)

    def inorder_traversal(self, node):
        if node:
            self.inorder_traversal(node.left)
            print(node.data, end=' ')
            self.inorder_traversal(node.right)

    def preorder_traversal(self, node):
        if node:
            print(node.data, end=' ')
            self.preorder_traversal(node.left)
            self.preorder_traversal(node.right)

    def postorder_traversal(self, node):
        if node:
            self.postorder_traversal(node.left)
            self.postorder_traversal(node.right)
            print(node.data, end=' ')

binary_tree = BinaryTree(5)
binary_tree.insert(3)
binary_tree.insert(7)
binary_tree.insert(2)
binary_tree.insert(4)
binary_tree.insert(6)
binary_tree.insert(8)

print("Inorder Traversal:")
binary_tree.inorder_traversal(binary_tree.root)
print("\nPreorder Traversal:")
binary_tree.preorder_traversal(binary_tree.root)
print("\nPostorder Traversal:")
binary_tree.postorder_traversal(binary_tree.root)
